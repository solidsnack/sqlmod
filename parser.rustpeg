use lines::*;
use query::*;


#[pub]
lines -> Vec<Line<'input>>
    = inline ** br

inline -> Line<'input>
    = declaration / broken_declaration / comment / something

declaration -> Line<'input>
    = start:#position
      s:&($(decl))                  // NB: Match twice on decl, once for string
      signature:decl                //     and once for signature.
      end:#position
      { Declaration(Section(start, end, s), signature) }

decl -> Signature
    = "--@" [ \t]+ signature:signature [ \t]* { signature }

broken_declaration -> Line<'input>
    = start:#position s:$("--@" [^\r\n]*) end:#position
      { BrokenDeclaration(Section(start, end, s)) }

comment -> Line<'input>
    = start:#position s:$("--" [^\r\n]*) end:#position
      { Comment(Section(start, end, s)) }

something -> Line<'input>
    = start:#position s:$([^\r\n]*) end:#position
      { Text(Section(start, end, s)) }


signature -> Signature
    = name:name
      parenthesized:parenthesized?
      annotations:([ \t]+ inner:(annotation ++ ([ \t]+)) { inner } )?
      { let annotations = annotations.unwrap_or(vec![]).into_iter();
        let parenthesized = parenthesized.into_iter();
        let combined = parenthesized.chain(annotations).map(|s| s.into());
        Signature { name: name.into(), attributes: combined.collect() } }


/// Simple names.
name -> &'input str
    = s:$([a-z] [a-zA-Z0-9_]*) { s }

/// Annotations are any trailing words or quoted groupings thereof.
annotation -> &'input str
    = s:$(plain_word / plain_word balanced_parens / balanced_parens / quoted)
      { s }

parenthesized -> &'input str
    = s:$(balanced_parens) { s }

/// No quotes, no spaces, no parentheses.
plain_word = [^ \t"()\r\n]+

/// Spaces allowed.
balanced_parens = "()" / "(" [^()]+ ")" / "(" ( [^()]+ / balanced_parens )+ ")"

/// Double-quoted strings.
quoted = "\"" ( "\\" "\"" / [^"] )+ "\""


br = "\r\n" / "\n"
